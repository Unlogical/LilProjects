#include <iostream>
#include <fstream>
using namespace std;

typedef struct TNode Node;
typedef struct TLinkedList LinkedList;

struct  TNode {
  Node* next;
  Node* prev;
  int value;
};

struct TLinkedList {
  Node* head;
  Node* tail;
  int count;
};

Node* createNode(int value, Node* next, Node* prev){
  Node* node = new Node;
  node->value = value;
  node->next = next;
  node->prev = prev;
  return node;
}

LinkedList* createList() {
  LinkedList* list = new LinkedList;
  list->head = NULL;
  list->tail = NULL;
  list->count = 0;
  return list;
}

int clearList(LinkedList* list) {
  if (!list) return -1;
  Node* tmp = NULL;
  while(list->head){
    tmp = list->head;
    list->head = list->head->next;
    delete tmp;
  }
  list->tail = NULL;
  list->count = 0;
  return 0;
}

int deleteList(LinkedList* list){
  if (!clearList(list)){
    delete list;
    return 0;
  }
  return -1;
}

int addFirstNode(LinkedList* list, int value){
  if (!list) return -1;
  Node* node = createNode(value,list->head, NULL);
  if(!list->head)
    list->tail = node;
  else 
    node->next->prev = node;
  list->head = node;
  list->count++;
  return 0;
}

int addLastNode(LinkedList* list, int value){
  if (!list) return -1;
  Node* node = createNode(value,NULL,list->tail);
  if(!list->head)
    list->head = node;
  else
    list->tail->next = node;
  list->tail = node;
  list->count++;
}

Node* seekAndDestroyEntry(Node* node, int value){
  while (node->next){
    if(node->next->value == value){
      Node* tmp = node->next;
      node->next = node->next->next;
      if (node->next) 
        node->next->prev = tmp->prev;
      delete tmp;
      return node;
    }
    node = node->next;
  }
  return node;
}

int deleteAllEntries(LinkedList* list, int value){
  if(!list) 
    return -1;
  if(!list->head)
    return 0;
  while(list->head->value == value){
    Node* tmp = list->head;
    list->head = list->head->next;
    if (list->head)
      list->head->prev = NULL;
    delete tmp;
  }
  Node* node = list->head;
  while(node->next)
    node = seekAndDestroyEntry(node, value);
  list->tail = node;
  return 0;
}

int deleteFirstEntry(LinkedList* list, int value){
  if (!list) 
    return -1;
  if(!list->head)
    return 0;
  if(list->head->value == value){
    Node* tmp = list->head;
    list->head = list->head->next;
    if (list->head)
      list->head->prev = NULL;
    delete tmp;
    return 0;
  }
  Node *node = seekAndDestroyEntry(list->head, value);
  if(!node->next)
    list->tail = node;
  return 0;
}

int reverseList(LinkedList* list){
  if (!list) 
    return -1;
  if(!list->head)
    return 0;
  Node* initialTail = list->tail;
  list->tail = list->head;
  while (list->head){
    Node* tmp = list->head->next;
    list->head->next = list->head->prev;
    list->head->prev = tmp;
    list->head = tmp;
  }
  list->head = initialTail;
}

int printList(LinkedList* list){
  if (!list) return -1;
  Node* node = list->head;
  cout<<"[ ";
  while(node){
    cout<<node->value<<' ';
    node = node->next;
  }
  cout<<"]"<<endl;
  return 0;
}

int main(){
  LinkedList* list = createList();
  int value = 0,
          i = 0;
  ifstream file("input.txt");
  while (file >> value){
    if(i % 2 == 0)
      addFirstNode(list, value);
    else 
      addLastNode(list, value);
    i++;
  }
  file.close();
  cout<<"List from file:"<<endl;
  printList(list);
 
  reverseList(list);
  cout<<"Reversed list:"<<endl;
  printList(list);

  reverseList(list);
  cout<<"Reversed back list:"<<endl;
  printList(list);

  deleteFirstEntry(list, 8);
  cout<<"List without first 8:"<<endl;
  printList(list);

  deleteAllEntries(list, 8);
  cout<<"List without 8:"<<endl;
  printList(list);

  reverseList(list);
  cout<<"Reversed list:"<<endl;
  printList(list);

  clearList(list);
  cout<<"Empty list:"<<endl;
  printList(list);
  
  deleteList(list);
  cin.get();
}

